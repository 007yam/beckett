{
    "docs": [
        {
            "location": "/",
            "text": "\ud83d\udcab Beckett\n\n\nHypermedia API Client Framework\n\n\n\n\nBeckett is a convention-based framework for building Python interfaces around HTTP APIs.\n\n\n\n\n\n\n\n\n\n\n\ud83d\udcd6 Features\n\n\n\n\nDefine your API client in Python instead of a data serialization language.\n\n\nEncourages good HTTP and REST practices without being too strict.\n\n\nResources are transformed into typed instances - no more raw dictionaries!\n\n\nAutomatic URL routing for RESTful interaction to your resources.\n\n\nHypermedia relationship links are automagically resolved into python methods.\n\n\nSupports hypermedia response formats such as JSONAPI and HAL.\n\n\nWorks out of the box, but each resource is completely configurable.\n\n\n\n\n\ud83c\udfd7 Status\n\n\nBeckett is currently under \nmajor development\n and is not ready for use.\n\n\n\ud83c\udfa5 Credits\n\n\nThis package was created with \nCookiecutter\n.\n\n\nWe use \nPython Requests\n for talking HTTP.\n\n\nFree software: \nISC license",
            "title": "Home"
        },
        {
            "location": "/#beckett",
            "text": "Hypermedia API Client Framework   Beckett is a convention-based framework for building Python interfaces around HTTP APIs.",
            "title": "\ud83d\udcab Beckett"
        },
        {
            "location": "/#features",
            "text": "Define your API client in Python instead of a data serialization language.  Encourages good HTTP and REST practices without being too strict.  Resources are transformed into typed instances - no more raw dictionaries!  Automatic URL routing for RESTful interaction to your resources.  Hypermedia relationship links are automagically resolved into python methods.  Supports hypermedia response formats such as JSONAPI and HAL.  Works out of the box, but each resource is completely configurable.",
            "title": "\ud83d\udcd6 Features"
        },
        {
            "location": "/#status",
            "text": "Beckett is currently under  major development  and is not ready for use.",
            "title": "\ud83c\udfd7 Status"
        },
        {
            "location": "/#credits",
            "text": "This package was created with  Cookiecutter .  We use  Python Requests  for talking HTTP.  Free software:  ISC license",
            "title": "\ud83c\udfa5 Credits"
        },
        {
            "location": "/intro/",
            "text": "Getting Started\n\n\nBeckett can be installed using \npip\n:\n\n\npip install beckett\n\n\n\n\nOnce installed, use the \nResources\n and \nClients\n documentation, or read through the concepts tutorial below to familiarise yourself with how Beckett works.\n\n\nConcepts\n\n\nBeckett has two key base models that you'll need to configure in order to get started: \nResources\n and \nClients\n.\n\n\nWe'll using the following snippet of code to explain the basics concepts of Beckett:\n\n\n# my_client.py\nfrom beckett import clients, resources\n\n\nclass PokemonResource(resources.BaseResource):\n    class Meta(resources.BaseResource.Meta):\n        name = 'Pokemon'\n        identifier = 'id'\n        attributes = (\n            'id',\n            'name',\n        )\n        methods = (\n            'get',\n        )\n\n\nclass PokemonClient(clients.BaseClient):\n    class Meta(clients.BaseClient.Meta):\n        base_url = 'https://pokeapi.co/api/v1/'\n        resources = (\n            PokemonResource,\n        )\n\n\n\n\nResources\n\n\nA \nResource\n object represents a single resource in your API service:\n\n\nResources have a series of attributes in their \nMeta\n class. These define the attributes and behaviour of a resource.\n\n\nIn this instance, we are naming our resource with the \nname\n attribute. We're defining a unique \nidentifier\n\nattribute to use when querying this resource, and setting a white list of \nattributes\n that we want to display on this resource.\n\n\nA full list of available attributes can be found on the \nResources\n page.\n\n\nClients\n\n\nA typical Beckett-based API client only needs one \nClient\n instance. However, many clients can be used for versioning.\n\n\nClients can be configured using \nMeta\n class attributes, and inherits the defaults from the \nBaseClient\n.\n\n\nIn this instance we're setting the \nbase_url\n of the API, as well as a list of \nresources\n that this API supports.\n\n\nA list of available attributes can be found on the \nClients\n page.\n\n\nExample Usage\n\n\nWe can now start calling the API!\n\n\nfrom my_client import PokemonClient\n\nmy_client = PokemonClient()\nresult = my_client.get_pokemon(1)[0]\n\nisinstance(result, PokemonResource)\n>>> True\nresult.name\n'Bulbasaur'\n\n\n\n\nOur client generates a collection of methods for every registered resource and understands how to properly call each method.\n\n\nA lot of stuff is automatically generated here for us, so let's break it down and go through it line by line:\n\n\nmy_client.get_pokemon(1)\n\n\n\n\nThe \nPokemonClient\n will look at \nPokemonResource\n \nmethods\n attribute to determine what HTTP methods are available on it. The default is:\n\n\nmethods = (\n        'get'\n    )\n\n\n\n\nThe \nPokemonResource\n will also set the resource name as the lower-case of the \nname\n attribute. However, if this resource is called something different in the API we can set it ourselves in \nPokemonResource\n:\n\n\nresource = 'pokemons'\n\n\n\n\nThe \n1\n will be used by the \nidentifier\n attribute on \nPokemonResource\n to help construct the URL when making HTTP calls.\n\n\nThat's the basics! We recommend reading the \nresources\n and \nclients\n documentation to understand the full breadth of possibilties with Beckett, or read the [advaced][advanced] tips guide for some more exciting features.",
            "title": "Getting Started"
        },
        {
            "location": "/intro/#getting-started",
            "text": "Beckett can be installed using  pip :  pip install beckett  Once installed, use the  Resources  and  Clients  documentation, or read through the concepts tutorial below to familiarise yourself with how Beckett works.",
            "title": "Getting Started"
        },
        {
            "location": "/intro/#concepts",
            "text": "Beckett has two key base models that you'll need to configure in order to get started:  Resources  and  Clients .  We'll using the following snippet of code to explain the basics concepts of Beckett:  # my_client.py\nfrom beckett import clients, resources\n\n\nclass PokemonResource(resources.BaseResource):\n    class Meta(resources.BaseResource.Meta):\n        name = 'Pokemon'\n        identifier = 'id'\n        attributes = (\n            'id',\n            'name',\n        )\n        methods = (\n            'get',\n        )\n\n\nclass PokemonClient(clients.BaseClient):\n    class Meta(clients.BaseClient.Meta):\n        base_url = 'https://pokeapi.co/api/v1/'\n        resources = (\n            PokemonResource,\n        )",
            "title": "Concepts"
        },
        {
            "location": "/intro/#resources",
            "text": "A  Resource  object represents a single resource in your API service:  Resources have a series of attributes in their  Meta  class. These define the attributes and behaviour of a resource.  In this instance, we are naming our resource with the  name  attribute. We're defining a unique  identifier \nattribute to use when querying this resource, and setting a white list of  attributes  that we want to display on this resource.  A full list of available attributes can be found on the  Resources  page.",
            "title": "Resources"
        },
        {
            "location": "/intro/#clients",
            "text": "A typical Beckett-based API client only needs one  Client  instance. However, many clients can be used for versioning.  Clients can be configured using  Meta  class attributes, and inherits the defaults from the  BaseClient .  In this instance we're setting the  base_url  of the API, as well as a list of  resources  that this API supports.  A list of available attributes can be found on the  Clients  page.",
            "title": "Clients"
        },
        {
            "location": "/intro/#example-usage",
            "text": "We can now start calling the API!  from my_client import PokemonClient\n\nmy_client = PokemonClient()\nresult = my_client.get_pokemon(1)[0]\n\nisinstance(result, PokemonResource)\n>>> True\nresult.name\n'Bulbasaur'  Our client generates a collection of methods for every registered resource and understands how to properly call each method.  A lot of stuff is automatically generated here for us, so let's break it down and go through it line by line:  my_client.get_pokemon(1)  The  PokemonClient  will look at  PokemonResource   methods  attribute to determine what HTTP methods are available on it. The default is:  methods = (\n        'get'\n    )  The  PokemonResource  will also set the resource name as the lower-case of the  name  attribute. However, if this resource is called something different in the API we can set it ourselves in  PokemonResource :  resource = 'pokemons'  The  1  will be used by the  identifier  attribute on  PokemonResource  to help construct the URL when making HTTP calls.  That's the basics! We recommend reading the  resources  and  clients  documentation to understand the full breadth of possibilties with Beckett, or read the [advaced][advanced] tips guide for some more exciting features.",
            "title": "Example Usage"
        },
        {
            "location": "/advanced/",
            "text": "Advanced Features\n\n\nUpdating / Creating resources\n\n\ntodo\n\n\nVersioning\n\n\ntodo\n\n\nResponse formats",
            "title": "Advanced Features"
        },
        {
            "location": "/advanced/#advanced-features",
            "text": "",
            "title": "Advanced Features"
        },
        {
            "location": "/advanced/#updating-creating-resources",
            "text": "todo",
            "title": "Updating / Creating resources"
        },
        {
            "location": "/advanced/#versioning",
            "text": "todo",
            "title": "Versioning"
        },
        {
            "location": "/advanced/#response-formats",
            "text": "",
            "title": "Response formats"
        },
        {
            "location": "/resources/",
            "text": "Resources are models relating to individual resources in an HTTP API.\n\n\nclass BaseResource\n\n\nA simple representation of a resource.\n\n\nExample:\n\n\n# myresources.py\nfrom beckett.resources import BaseResource\n\nclass Product(BaseResource):\n\n    class Meta:\n        name = 'Product'\n        identifier = 'slug'\n        attributes = (\n            'slug',\n            'name',\n            'price',\n            'discount'\n        )\n\n\n\n\n\nUsage:\n\n\n# Note: Data will usually come straight from the client method\n>>> data = {'name': 'Tasty product', 'slug': 'sluggy'}\n>>> product = Product(**data)\n<Product | sluggy>\n>>> product.name\n'Tasty product'\n\n\n\n\n- Meta Attributes\n\n\n\n\n\n\n\n\nAttribute\n\n\nRequired\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nYes\n\n\nString\n\n\nThe name of this resource instance. Usually a singular noun.\n\n\n\n\n\n\nresource_name\n\n\nNo\n\n\nString\n\n\nThe name of this resource used in the url. Usually a plural noun. If not set, we'll attempt to make a pluralised version of the \nname\n attribute.\n\n\n\n\n\n\nidentifier\n\n\nYes\n\n\nInt/String\n\n\nThe key attribute that can be used to identify this attribute. Used when referring to related resources.\n\n\n\n\n\n\nattributes\n\n\nYes\n\n\nTuple of Strings\n\n\nA tuple list of strings, referring to the key attributes that you want to populate the resource instances with. You can use this for whitelisting and versioning changes in your API.\n\n\n\n\n\n\nacceptable_status_codes\n\n\nNo\n\n\nTuple of Ints\n\n\nA tuple list of integers, referring to the HTTP status codes that are considered \"acceptable\" when communicating with this resource. If a status code is received that does not match this set, an error will be raised.\n\n\n\n\n\n\nmethods\n\n\nNo\n\n\nTuple of Strings\n\n\nA tuple list of strings, referring to the HTTP methods that can be used with this resource. For each method, a python method will be generated on the client that registers this resource.",
            "title": "Resources"
        },
        {
            "location": "/resources/#class-baseresource",
            "text": "A simple representation of a resource.  Example:  # myresources.py\nfrom beckett.resources import BaseResource\n\nclass Product(BaseResource):\n\n    class Meta:\n        name = 'Product'\n        identifier = 'slug'\n        attributes = (\n            'slug',\n            'name',\n            'price',\n            'discount'\n        )  Usage:  # Note: Data will usually come straight from the client method\n>>> data = {'name': 'Tasty product', 'slug': 'sluggy'}\n>>> product = Product(**data)\n<Product | sluggy>\n>>> product.name\n'Tasty product'",
            "title": "class BaseResource"
        },
        {
            "location": "/resources/#-meta-attributes",
            "text": "Attribute  Required  Type  Description      name  Yes  String  The name of this resource instance. Usually a singular noun.    resource_name  No  String  The name of this resource used in the url. Usually a plural noun. If not set, we'll attempt to make a pluralised version of the  name  attribute.    identifier  Yes  Int/String  The key attribute that can be used to identify this attribute. Used when referring to related resources.    attributes  Yes  Tuple of Strings  A tuple list of strings, referring to the key attributes that you want to populate the resource instances with. You can use this for whitelisting and versioning changes in your API.    acceptable_status_codes  No  Tuple of Ints  A tuple list of integers, referring to the HTTP status codes that are considered \"acceptable\" when communicating with this resource. If a status code is received that does not match this set, an error will be raised.    methods  No  Tuple of Strings  A tuple list of strings, referring to the HTTP methods that can be used with this resource. For each method, a python method will be generated on the client that registers this resource.",
            "title": "- Meta Attributes"
        }
    ]
}